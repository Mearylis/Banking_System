package banking.ui;

import banking.facade.BankingFacade;
import banking.model.Customer;
import banking.model.Notification;
import banking.account.Account;
import banking.account.decorators.*;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.List;
import java.util.Scanner;

public class InteractiveMenu {
    private final BankingFacade bankingFacade;
    private final Scanner scanner;
    private String currentCustomerId;

    public InteractiveMenu() {
        this.bankingFacade = new BankingFacade();
        this.scanner = new Scanner(System.in);
        this.currentCustomerId = null;
    }

    public void start() {
        displayWelcome();

        while (true) {
            if (currentCustomerId == null) {
                showMainMenu();
            } else {
                showCustomerMenu();
            }
        }
    }

    private void displayWelcome() {
        System.out.println("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
        System.out.println("‚ïë                üè¶ –ë–ê–ù–ö–û–í–°–ö–ê–Ø –°–ò–°–¢–ï–ú–ê              ‚ïë");
        System.out.println("‚ïë           Digital Banking & Investment            ‚ïë");
        System.out.println("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");
        System.out.println();
    }

    private void showMainMenu() {
        System.out.println("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê");
        System.out.println("‚îÇ  1. üîê –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É                            ‚îÇ");
        System.out.println("‚îÇ  2. üë§ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞                     ‚îÇ");
        System.out.println("‚îÇ  3. üìä –ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã             ‚îÇ");
        System.out.println("‚îÇ  4. ‚ÑπÔ∏è  –û —Å–∏—Å—Ç–µ–º–µ                                 ‚îÇ");
        System.out.println("‚îÇ  5. ‚ùå –í—ã—Ö–æ–¥                                      ‚îÇ");
        System.out.println("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò");
        System.out.print("üéØ –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é: ");

        int choice = readIntInput();

        switch (choice) {
            case 1 -> loginCustomer();
            case 2 -> createNewCustomer();
            case 3 -> runDemo();
            case 4 -> showSystemInfo();
            case 5 -> exitSystem();
            default -> showError("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
        }
    }

    private void showCustomerMenu() {
        System.out.println("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –õ–ò–ß–ù–´–ô –ö–ê–ë–ò–ù–ï–¢ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê");
        System.out.println("‚îÇ üë§ –ö–ª–∏–µ–Ω—Ç: " + padRight(currentCustomerId, 35) + "‚îÇ");
        System.out.println("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§");
        System.out.println("‚îÇ  1. üìù –û—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤—ã–π —Å—á–µ—Ç                         ‚îÇ");
        System.out.println("‚îÇ  2. üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç                             ‚îÇ");
        System.out.println("‚îÇ  3. üí∏ –°–Ω—è—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞                             ‚îÇ");
        System.out.println("‚îÇ  4. üîÑ –ü–µ—Ä–µ–≤–æ–¥ –º–µ–∂–¥—É —Å—á–µ—Ç–∞–º–∏                      ‚îÇ");
        System.out.println("‚îÇ  5. üìà –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏                    ‚îÇ");
        System.out.println("‚îÇ  6. üìã –ú–æ–∏ —Å—á–µ—Ç–∞                                  ‚îÇ");
        System.out.println("‚îÇ  7. üìä –í—ã–ø–∏—Å–∫–∞ –ø–æ —Å—á–µ—Ç—É                           ‚îÇ");
        System.out.println("‚îÇ  8. üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (" + getUnreadNotificationsCount() + ")                          ‚îÇ");
        System.out.println("‚îÇ  9. üìÑ –ü–æ—Ä—Ç—Ñ–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç                          ‚îÇ");
        System.out.println("‚îÇ 10. ‚öôÔ∏è  –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏                   ‚îÇ");
        System.out.println("‚îÇ 11. ‚Ü©Ô∏è  –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞                         ‚îÇ");
        System.out.println("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò");
        System.out.print("üéØ –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é: ");

        int choice = readIntInput();

        switch (choice) {
            case 1 -> createAccount();
            case 2 -> depositMoney();
            case 3 -> withdrawMoney();
            case 4 -> transferMoney();
            case 5 -> investmentOperations();
            case 6 -> viewAccounts();
            case 7 -> viewStatement();
            case 8 -> viewNotifications();
            case 9 -> viewPortfolio();
            case 10 -> showAdvancedOperations();
            case 11 -> logout();
            default -> showError("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
        }
    }

    private void showAdvancedOperations() {
        System.out.println("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –û–ü–ï–†–ê–¶–ò–ò ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê");
        System.out.println("‚îÇ  1. üõ°Ô∏è  –°–æ–∑–¥–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π —Å—á–µ—Ç    ‚îÇ");
        System.out.println("‚îÇ  2. üí≥ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–≤–µ—Ä–¥—Ä–∞—Ñ—Ç                        ‚îÇ");
        System.out.println("‚îÇ  3. üí± –ú—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏                    ‚îÇ");
        System.out.println("‚îÇ  4. ‚≠ê –ü—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ             ‚îÇ");
        System.out.println("‚îÇ  5. üéÅ –ë–æ–Ω—É—Å–Ω—ã–µ –±–∞–ª–ª—ã                             ‚îÇ");
        System.out.println("‚îÇ  6. üóëÔ∏è  –ó–∞–∫—Ä—ã—Ç—å —Å—á–µ—Ç                              ‚îÇ");
        System.out.println("‚îÇ  7. ‚Ü©Ô∏è  –ù–∞–∑–∞–¥                                     ‚îÇ");
        System.out.println("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò");
        System.out.print("üéØ –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é: ");

        int choice = readIntInput();

        switch (choice) {
            case 1 -> createSafetyInvestment();
            case 2 -> checkOverdraft();
            case 3 -> currencyOperations();
            case 4 -> priorityBanking();
            case 5 -> rewardPoints();
            case 6 -> closeAccount();
            case 7 -> { return; }
            default -> showError("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.");
        }
    }

    private void loginCustomer() {
        System.out.println();
        System.out.print("üîê –í–≤–µ–¥–∏—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞: ");
        String customerId = scanner.nextLine().trim();

        if (customerId.isEmpty()) {
            showError("ID –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.");
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –∫–ª–∏–µ–Ω—Ç–∞ —Å—á–µ—Ç–∞
        try {
            List<Account> accounts = bankingFacade.getCustomerAccountsByType(customerId, "");
            if (accounts.isEmpty()) {
                showWarning("–ö–ª–∏–µ–Ω—Ç —Å ID '" + customerId + "' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç —Å—á–µ—Ç–æ–≤.");
                System.out.print("–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞? (y/n): ");
                String createNew = scanner.nextLine().trim();
                if ("y".equalsIgnoreCase(createNew) || "–¥".equalsIgnoreCase(createNew)) {
                    createNewCustomerWithId(customerId);
                    return;
                } else {
                    showInfo("–í—Ö–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.");
                    return;
                }
            }

            currentCustomerId = customerId;
            showSuccess("–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, " + customerId);

        } catch (Exception e) {
            showError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: " + e.getMessage());
        }
    }

    private void createNewCustomer() {
        System.out.println();
        System.out.print("üë§ –í–≤–µ–¥–∏—Ç–µ ID –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞: ");
        String customerId = scanner.nextLine().trim();

        if (customerId.isEmpty()) {
            showError("ID –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.");
            return;
        }

        createNewCustomerWithId(customerId);
    }

    private void createNewCustomerWithId(String customerId) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫–ª–∏–µ–Ω—Ç
        try {
            List<Account> existingAccounts = bankingFacade.getCustomerAccountsByType(customerId, "");
            if (!existingAccounts.isEmpty()) {
                showWarning("–ö–ª–∏–µ–Ω—Ç —Å ID '" + customerId + "' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!");
                System.out.print("–•–æ—Ç–∏—Ç–µ –≤–æ–π—Ç–∏ –ø–æ–¥ —ç—Ç–∏–º ID? (y/n): ");
                String login = scanner.nextLine().trim();
                if ("y".equalsIgnoreCase(login) || "–¥".equalsIgnoreCase(login)) {
                    currentCustomerId = customerId;
                    showSuccess("–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, " + customerId);
                }
                return;
            }
        } catch (Exception e) {
            // –ö–ª–∏–µ–Ω—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        }

        showSuccess("–ö–ª–∏–µ–Ω—Ç " + customerId + " —Å–æ–∑–¥–∞–Ω!");
        System.out.println("–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –ø–æ–¥ —ç—Ç–∏–º ID –∏–ª–∏ —Å—Ä–∞–∑—É –æ—Ç–∫—Ä—ã—Ç—å —Å—á–µ—Ç.");

        System.out.print("–•–æ—Ç–∏—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å —Å—á–µ—Ç —Å–µ–π—á–∞—Å? (y/n): ");
        String openAccount = scanner.nextLine().trim();
        if ("y".equalsIgnoreCase(openAccount) || "–¥".equalsIgnoreCase(openAccount)) {
            currentCustomerId = customerId;
            createAccount();
        } else {
            showInfo("–í—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –ø–æ–∑–∂–µ –ø–æ–¥ ID: " + customerId);
        }
    }

    private void createAccount() {
        if (currentCustomerId == null) {
            showError("–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.");
            return;
        }

        System.out.println();
        System.out.println("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –û–¢–ö–†–´–¢–ò–ï –ù–û–í–û–ì–û –°–ß–ï–¢–ê ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê");
        System.out.println("‚îÇ  1. üí∞ –°–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–π —Å—á–µ—Ç                       ‚îÇ");
        System.out.println("‚îÇ     ‚Ä¢ –ë–æ–Ω—É—Å–Ω—ã–µ –±–∞–ª–ª—ã                             ‚îÇ");
        System.out.println("‚îÇ     ‚Ä¢ –°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –æ—Ç $10,000                     ‚îÇ");
        System.out.println("‚îÇ  2. üìà –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π —Å—á–µ—Ç                       ‚îÇ");
        System.out.println("‚îÇ     ‚Ä¢ –ù–∞–ª–æ–≥–æ–≤–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è 15%                  ‚îÇ");
        System.out.println("‚îÇ     ‚Ä¢ –ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏ –æ—Ç $5,000                       ‚îÇ");
        System.out.println("‚îÇ  3. üí≥ –†–∞—Å—á–µ—Ç–Ω—ã–π —Å—á–µ—Ç                            ‚îÇ");
        System.out.println("‚îÇ     ‚Ä¢ –û–≤–µ—Ä–¥—Ä–∞—Ñ—Ç –¥–æ $2,000                        ‚îÇ");
        System.out.println("‚îÇ     ‚Ä¢ –ú—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω–æ—Å—Ç—å –æ—Ç $5,000                 ‚îÇ");
        System.out.println("‚îÇ  4. ‚Ü©Ô∏è  –ù–∞–∑–∞–¥                                    ‚îÇ");
        System.out.println("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò");
        System.out.print("üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—á–µ—Ç–∞: ");

        int typeChoice = readIntInput();
        if (typeChoice == 4) return;

        String accountType = switch (typeChoice) {
            case 1 -> "savings";
            case 2 -> "investment";
            case 3 -> "checking";
            default -> {
                showError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Å—á–µ—Ç–∞.");
                yield null;
            }
        };

        if (accountType == null) return;

        System.out.print("üíµ –í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç: $");
        BigDecimal deposit = readBigDecimalInput();

        if (deposit.compareTo(BigDecimal.ZERO) < 0) {
            showError("–°—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π.");
            return;
        }

        if (deposit.compareTo(BigDecimal.ZERO) == 0) {
            showWarning("–í—ã –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç–µ —Å—á–µ—Ç —Å –Ω—É–ª–µ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º.");
        }

        try {
            Account account = bankingFacade.openAccountWithBenefits(currentCustomerId, accountType, deposit);
            showSuccess("–°—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!");
            System.out.println("üìã –ù–æ–º–µ—Ä —Å—á–µ—Ç–∞: " + account.getAccountNumber());
            System.out.println("üìù –¢–∏–ø: " + account.getAccountType());
            System.out.println("üíé –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: " + account.getDescription());
            System.out.println("üíµ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: $" + account.getBalance());
        } catch (Exception e) {
            showError("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞: " + e.getMessage());
        }

        pressAnyKeyToContinue();
    }

    private void depositMoney() {
        if (currentCustomerId == null) {
            showError("–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.");
            return;
        }

        System.out.println();
        System.out.print("üì• –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: ");
        String accountNumber = scanner.nextLine().trim();

        if (accountNumber.isEmpty()) {
            showError("–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.");
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—á–µ—Ç –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –∫–ª–∏–µ–Ω—Ç—É
        if (!isAccountAccessible(accountNumber)) {
            showError("–°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø–∞.");
            return;
        }

        System.out.print("üíµ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: $");
        BigDecimal amount = readBigDecimalInput();

        if (amount.compareTo(BigDecimal.ZERO) <= 0) {
            showError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.");
            return;
        }

        if (amount.compareTo(BigDecimal.valueOf(100000)) > 0) {
            showWarning("–í–Ω–∏–º–∞–Ω–∏–µ: –≤—ã –≤–Ω–æ—Å–∏—Ç–µ –æ—á–µ–Ω—å –∫—Ä—É–ø–Ω—É—é —Å—É–º–º—É (>$100,000).");
            System.out.print("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é (y/n): ");
            String confirm = scanner.nextLine().trim();
            if (!"y".equalsIgnoreCase(confirm) && !"–¥".equalsIgnoreCase(confirm)) {
                showInfo("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.");
                return;
            }
        }

        try {
            bankingFacade.deposit(accountNumber, amount, "–î–µ–ø–æ–∑–∏—Ç —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É");
            showSuccess("–£—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–æ $" + amount);
        } catch (Exception e) {
            showError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏: " + e.getMessage());
        }

        pressAnyKeyToContinue();
    }

    private void withdrawMoney() {
        if (currentCustomerId == null) {
            showError("–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.");
            return;
        }

        System.out.println();
        System.out.print("üì§ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞ –¥–ª—è —Å–Ω—è—Ç–∏—è: ");
        String accountNumber = scanner.nextLine().trim();

        if (accountNumber.isEmpty()) {
            showError("–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.");
            return;
        }

        if (!isAccountAccessible(accountNumber)) {
            showError("–°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø–∞.");
            return;
        }

        System.out.print("üíµ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Å–Ω—è—Ç–∏—è: $");
        BigDecimal amount = readBigDecimalInput();

        if (amount.compareTo(BigDecimal.ZERO) <= 0) {
            showError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.");
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞
        try {
            Account account = getAccountByNumber(accountNumber);
            if (account != null) {
                if (account.getBalance().compareTo(amount) < 0) {
                    showError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç–µ.");
                    System.out.println("üí≥ –î–æ—Å—Ç—É–ø–Ω–æ: $" + account.getBalance());
                    return;
                }

                if (amount.compareTo(BigDecimal.valueOf(5000)) > 0) {
                    showWarning("–í–Ω–∏–º–∞–Ω–∏–µ: –∫—Ä—É–ø–Ω–æ–µ —Å–Ω—è—Ç–∏–µ (>$5,000).");
                    System.out.print("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é (y/n): ");
                    String confirm = scanner.nextLine().trim();
                    if (!"y".equalsIgnoreCase(confirm) && !"–¥".equalsIgnoreCase(confirm)) {
                        showInfo("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.");
                        return;
                    }
                }
            }
        } catch (Exception e) {
            showError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—á–µ—Ç–∞: " + e.getMessage());
            return;
        }

        try {
            bankingFacade.withdraw(accountNumber, amount, "–°–Ω—è—Ç–∏–µ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É");
            showSuccess("–£—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç–æ $" + amount);
        } catch (Exception e) {
            showError("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–Ω—è—Ç–∏–∏: " + e.getMessage());
        }

        pressAnyKeyToContinue();
    }

    private void transferMoney() {
        if (currentCustomerId == null) {
            showError("–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.");
            return;
        }

        System.out.println();
        System.out.print("‚û°Ô∏è  –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: ");
        String fromAccount = scanner.nextLine().trim();

        if (fromAccount.isEmpty()) {
            showError("–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.");
            return;
        }

        if (!isAccountAccessible(fromAccount)) {
            showError("–°—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø–∞.");
            return;
        }

        System.out.print("‚¨ÖÔ∏è  –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è: ");
        String toAccount = scanner.nextLine().trim();

        if (toAccount.isEmpty()) {
            showError("–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.");
            return;
        }

        if (fromAccount.equals(toAccount)) {
            showError("–ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ —Ç–æ—Ç –∂–µ —Å—á–µ—Ç.");
            return;
        }

        System.out.print("üíµ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞: $");
        BigDecimal amount = readBigDecimalInput();

        if (amount.compareTo(BigDecimal.ZERO) <= 0) {
            showError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.");
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        try {
            Account account = getAccountByNumber(fromAccount);
            if (account != null && account.getBalance().compareTo(amount) < 0) {
                showError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è.");
                System.out.println("üí≥ –î–æ—Å—Ç—É–ø–Ω–æ: $" + account.getBalance());
                return;
            }
        } catch (Exception e) {
            showError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—á–µ—Ç–∞: " + e.getMessage());
            return;
        }

        System.out.print("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞: ");
        String description = scanner.nextLine().trim();

        if (description.isEmpty()) {
            description = "–ü–µ—Ä–µ–≤–æ–¥ –º–µ–∂–¥—É —Å—á–µ—Ç–∞–º–∏";
        }

        try {
            bankingFacade.transferBetweenAccounts(fromAccount, toAccount, amount, description);
            showSuccess("–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ $" + amount);
        } catch (Exception e) {
            showError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: " + e.getMessage());
        }

        pressAnyKeyToContinue();
    }

    private void investmentOperations() {
        if (currentCustomerId == null) {
            showError("–°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.");
            return;
        }

        System.out.println();
        System.out.println("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ò–ù–í–ï–°–¢–ò–¶–ò–û–ù–ù–´–ï –û–ü–ï–†–ê–¶–ò–ò ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê");
        System.out.println("‚îÇ  1. üìà –ù–∞—á–∏—Å–ª–∏—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –¥–æ—Ö–æ–¥             ‚îÇ");
        System.out.println("‚îÇ  2. üè¶ –°–æ–∑–¥–∞—Ç—å –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π —Å—á–µ—Ç                ‚îÇ");
        System.out.println("‚îÇ  3. ‚Ü©Ô∏è  –ù–∞–∑–∞–¥                                     ‚îÇ");
        System.out.println("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò");
        System.out.print("üéØ –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é: ");

        int choice = readIntInput();

        switch (choice) {
            case 1 -> applyInvestmentReturns();
            case 2 -> createInvestmentAccount();
            case 3 -> { return; }
            default -> showError("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.");
        }
    }

    private void applyInvestmentReturns() {
        System.out.println();
        System.out.print("üìà –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å—á–µ—Ç–∞: ");
        String accountNumber = scanner.nextLine().trim();

        if (accountNumber.isEmpty()) {
            showError("–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.");
            return;
        }

        if (!isAccountAccessible(accountNumber)) {
            showError("–°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø–∞.");
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—á–µ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π
        try {
            Account account = getAccountByNumber(accountNumber);
            if (account != null && !account.getAccountType().contains("Investment")) {
                showError("–≠—Ç–æ—Ç —Å—á–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–º.");
                return;
            }
        } catch (Exception e) {
            showError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—á–µ—Ç–∞: " + e.getMessage());
            return;
        }

        System.out.print("üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞: $");
        BigDecimal returns = readBigDecimalInput();

        if (returns.compareTo(BigDecimal.ZERO) <= 0) {
            showError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.");
            return;
        }

        try {
            bankingFacade.applyInvestmentReturns(accountNumber, returns);
            showSuccess("–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –¥–æ—Ö–æ–¥ –Ω–∞—á–∏—Å–ª–µ–Ω");
        } catch (Exception e) {
            showError("–û—à–∏–±–∫–∞: " + e.getMessage());
        }

        pressAnyKeyToContinue();
    }

    private void createInvestmentAccount() {
        System.out.println();
        System.out.print("üíµ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π: $");
        BigDecimal investment = readBigDecimalInput();

        if (investment.compareTo(BigDecimal.ZERO) <= 0) {
            showError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.");
            return;
        }

        if (investment.compareTo(BigDecimal.valueOf(1000)) < 0) {
            showWarning("–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å—á–µ—Ç–∞: $1,000");
        }

        try {
            bankingFacade.openAccountWithBenefits(currentCustomerId, "investment", investment);
            showSuccess("–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π —Å—á–µ—Ç —Å–æ–∑–¥–∞–Ω");
        } catch (Exception e) {
            showError("–û—à–∏–±–∫–∞: " + e.getMessage());
        }

        pressAnyKeyToContinue();
    }

    private void createSafetyInvestment() {
        System.out.println();
        System.out.print("üõ°Ô∏è  –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: $");
        BigDecimal investment = readBigDecimalInput();

        if (investment.compareTo(BigDecimal.ZERO) <= 0) {
            showError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.");
            return;
        }

        try {
            bankingFacade.investWithSafetyMode(currentCustomerId, investment);
            showSuccess("–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π —Å—á–µ—Ç —Å–æ–∑–¥–∞–Ω!");
        } catch (Exception e) {
            showError("–û—à–∏–±–∫–∞: " + e.getMessage());
        }

        pressAnyKeyToContinue();
    }

    private void checkOverdraft() {
        System.out.println();
        System.out.println("üí≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≤–µ—Ä–¥—Ä–∞—Ñ—Ç–∞");

        List<Account> accounts = bankingFacade.getCustomerAccountsByType(currentCustomerId, "Checking");
        if (accounts.isEmpty()) {
            showError("–£ –≤–∞—Å –Ω–µ—Ç —Ä–∞—Å—á–µ—Ç–Ω—ã—Ö —Å—á–µ—Ç–æ–≤.");
            return;
        }

        for (Account account : accounts) {
            if (account instanceof OverdraftProtectionDecorator) {
                OverdraftProtectionDecorator overdraftAccount = (OverdraftProtectionDecorator) account;
                System.out.println("üìã –°—á–µ—Ç: " + account.getAccountNumber());
                System.out.println("üí≥ –õ–∏–º–∏—Ç –æ–≤–µ—Ä–¥—Ä–∞—Ñ—Ç–∞: $" + overdraftAccount.getAvailableOverdraft());
                System.out.println("üí∞ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: $" + overdraftAccount.getUsedOverdraft());
            }
        }

        pressAnyKeyToContinue();
    }

    private void currencyOperations() {
        System.out.println();
        System.out.println("üí± –ú—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏");

        List<Account> accounts = bankingFacade.getCustomerAccountsByType(currentCustomerId, "Checking");
        boolean hasCurrencyAccount = false;

        for (Account account : accounts) {
            if (account instanceof ForeignCurrencyDecorator) {
                hasCurrencyAccount = true;
                ForeignCurrencyDecorator currencyAccount = (ForeignCurrencyDecorator) account;
                System.out.println("üìã –°—á–µ—Ç: " + account.getAccountNumber());
                System.out.println("üåç –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã: " +
                        String.join(", ", currencyAccount.getSupportedCurrencies().keySet()));
            }
        }

        if (!hasCurrencyAccount) {
            showInfo("–ú—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω–æ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–Ω—ã—Ö —Å—á–µ—Ç–æ–≤ —Å –±–∞–ª–∞–Ω—Å–æ–º –æ—Ç $5,000");
        }

        pressAnyKeyToContinue();
    }

    private void priorityBanking() {
        System.out.println();
        System.out.println("‚≠ê –ü—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ");

        List<Account> accounts = bankingFacade.getCustomerAccountsByType(currentCustomerId, "Investment");
        boolean hasPriorityAccount = false;

        for (Account account : accounts) {
            if (account instanceof PriorityBankingDecorator) {
                hasPriorityAccount = true;
                PriorityBankingDecorator priorityAccount = (PriorityBankingDecorator) account;
                System.out.println("üìã –°—á–µ—Ç: " + account.getAccountNumber());
                System.out.println("‚ú® –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: " + priorityAccount.getRemainingFreeTransactions());
                System.out.println("üíé –ü—Ä–µ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: " +
                        priorityAccount.getPreferentialInterestRate().multiply(BigDecimal.valueOf(100)) + "%");
            }
        }

        if (!hasPriorityAccount) {
            showInfo("–ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö —Å—á–µ—Ç–æ–≤ —Å –±–∞–ª–∞–Ω—Å–æ–º –æ—Ç $5,000");
        }

        pressAnyKeyToContinue();
    }

    private void rewardPoints() {
        System.out.println();
        System.out.println("üéÅ –ë–æ–Ω—É—Å–Ω—ã–µ –±–∞–ª–ª—ã");

        List<Account> accounts = bankingFacade.getCustomerAccountsByType(currentCustomerId, "Savings");
        boolean hasRewardsAccount = false;

        for (Account account : accounts) {
            if (account instanceof RewardPointsDecorator) {
                hasRewardsAccount = true;
                RewardPointsDecorator rewardsAccount = (RewardPointsDecorator) account;
                System.out.println("üìã –°—á–µ—Ç: " + account.getAccountNumber());
                System.out.println("‚≠ê –ù–∞–∫–æ–ø–ª–µ–Ω–æ –±–∞–ª–ª–æ–≤: " + rewardsAccount.getRewardPoints());
                System.out.println("üéØ –°—Ç–∞–≤–∫–∞: " + rewardsAccount.getPointsPerDollar() + " –±–∞–ª–ª–∞ –∑–∞ $1");
            }
        }

        if (!hasRewardsAccount) {
            showInfo("–ë–æ–Ω—É—Å–Ω—ã–µ –±–∞–ª–ª—ã –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –Ω–∞ —Å–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Å—á–µ—Ç–∞: 2 –±–∞–ª–ª–∞ –∑–∞ –∫–∞–∂–¥—ã–π –¥–æ–ª–ª–∞—Ä");
        }

        pressAnyKeyToContinue();
    }

    private void viewAccounts() {
        System.out.println();
        bankingFacade.displayCustomerInfo(currentCustomerId);
        pressAnyKeyToContinue();
    }

    private void viewStatement() {
        System.out.println();
        System.out.print("üìä –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞ –¥–ª—è –≤—ã–ø–∏—Å–∫–∏: ");
        String accountNumber = scanner.nextLine().trim();

        if (accountNumber.isEmpty()) {
            showError("–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.");
            return;
        }

        if (!isAccountAccessible(accountNumber)) {
            showError("–°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø–∞.");
            return;
        }

        try {
            String statement = bankingFacade.generateAccountStatement(
                    accountNumber,
                    LocalDate.now().minusMonths(1),
                    LocalDate.now()
            );
            System.out.println(statement);
        } catch (Exception e) {
            showError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—ã–ø–∏—Å–∫–∏: " + e.getMessage());
        }

        pressAnyKeyToContinue();
    }

    private void viewNotifications() {
        System.out.println();
        List<Notification> notifications = bankingFacade.getCustomerNotifications(currentCustomerId);

        if (notifications.isEmpty()) {
            showInfo("üì≠ –£ –≤–∞—Å –Ω–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.");
        } else {
            System.out.println("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê");
            for (int i = 0; i < notifications.size(); i++) {
                Notification notif = notifications.get(i);
                String status = notif.isRead() ? "üì≠" : "üì¨";
                String index = String.format("%2d", i + 1);
                System.out.printf("‚îÇ %s %s %-45s ‚îÇ\n", status, index, notif.getTitle());
                System.out.printf("‚îÇ    %-50s ‚îÇ\n", notif.getMessage());
                if (i < notifications.size() - 1) {
                    System.out.println("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§");
                }
            }
            System.out.println("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò");
        }

        pressAnyKeyToContinue();
    }

    private void viewPortfolio() {
        System.out.println();
        try {
            String portfolio = bankingFacade.generateCustomerPortfolio(currentCustomerId);
            System.out.println(portfolio);
        } catch (Exception e) {
            showError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: " + e.getMessage());
        }

        pressAnyKeyToContinue();
    }

    private void closeAccount() {
        System.out.println();
        System.out.print("üóëÔ∏è  –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è: ");
        String accountNumber = scanner.nextLine().trim();

        if (accountNumber.isEmpty()) {
            showError("–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.");
            return;
        }

        if (!isAccountAccessible(accountNumber)) {
            showError("–°—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø–∞.");
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —Å—á–µ—Ç–∞
        try {
            Account account = getAccountByNumber(accountNumber);
            if (account != null && account.getBalance().compareTo(BigDecimal.ZERO) > 0) {
                showWarning("–ù–∞ —Å—á–µ—Ç–µ –æ—Å—Ç–∞—é—Ç—Å—è —Å—Ä–µ–¥—Å—Ç–≤–∞: $" + account.getBalance());
                System.out.print("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —Å—á–µ—Ç? (y/n): ");
                String confirm = scanner.nextLine().trim();
                if (!"y".equalsIgnoreCase(confirm) && !"–¥".equalsIgnoreCase(confirm)) {
                    showInfo("–ó–∞–∫—Ä—ã—Ç–∏–µ —Å—á–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.");
                    return;
                }
            }
        } catch (Exception e) {
            showError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—á–µ—Ç–∞: " + e.getMessage());
            return;
        }

        System.out.print("‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —Å—á–µ—Ç " + accountNumber + "? (y/n): ");
        String confirmation = scanner.nextLine().trim();

        if ("y".equalsIgnoreCase(confirmation) || "–¥".equalsIgnoreCase(confirmation)) {
            try {
                bankingFacade.closeAccount(currentCustomerId, accountNumber);
                showSuccess("–°—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç.");
            } catch (Exception e) {
                showError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—á–µ—Ç–∞: " + e.getMessage());
            }
        } else {
            showInfo("–ó–∞–∫—Ä—ã—Ç–∏–µ —Å—á–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.");
        }

        pressAnyKeyToContinue();
    }

    private void runDemo() {
        System.out.println();
        System.out.println("üöÄ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã...");
        banking.Application demoApp = new banking.Application();
        demoApp.runQuickDemo();
        pressAnyKeyToContinue();
    }

    private void showSystemInfo() {
        System.out.println();
        System.out.println("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –û –°–ò–°–¢–ï–ú–ï ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê");
        System.out.println("‚îÇ üè¶ Digital Banking & Investment System         ‚îÇ");
        System.out.println("‚îÇ                                                ‚îÇ");
        System.out.println("‚îÇ üìä –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã:                     ‚îÇ");
        System.out.println("‚îÇ   ‚Ä¢ Decorator - –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏‚îÇ");
        System.out.println("‚îÇ   ‚Ä¢ Facade - –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞          ‚îÇ");
        System.out.println("‚îÇ                                                ‚îÇ");
        System.out.println("‚îÇ üíé –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã:                        ‚îÇ");
        System.out.println("‚îÇ   ‚Ä¢ 3 —Ç–∏–ø–∞ —Å—á–µ—Ç–æ–≤ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –±–µ–Ω–µ—Ñ–∏—Ç–∞–º–∏      ‚îÇ");
        System.out.println("‚îÇ   ‚Ä¢ 6 –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π       ‚îÇ");
        System.out.println("‚îÇ   ‚Ä¢ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π            ‚îÇ");
        System.out.println("‚îÇ   ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç–∏           ‚îÇ");
        System.out.println("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò");
        pressAnyKeyToContinue();
    }

    private void logout() {
        System.out.println();
        showSuccess("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è, " + currentCustomerId + "!");
        currentCustomerId = null;
        pressAnyKeyToContinue();
    }

    private void exitSystem() {
        System.out.println();
        System.out.println("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
        System.out.println("‚ïë         –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã!         ‚ïë");
        System.out.println("‚ïë                 –î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á! üëã               ‚ïë");
        System.out.println("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");
        System.exit(0);
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    private boolean isAccountAccessible(String accountNumber) {
        try {
            List<Account> customerAccounts = bankingFacade.getCustomerAccountsByType(currentCustomerId, "");
            return customerAccounts.stream()
                    .anyMatch(account -> account.getAccountNumber().equals(accountNumber));
        } catch (Exception e) {
            return false;
        }
    }

    private Account getAccountByNumber(String accountNumber) {
        try {
            List<Account> customerAccounts = bankingFacade.getCustomerAccountsByType(currentCustomerId, "");
            return customerAccounts.stream()
                    .filter(account -> account.getAccountNumber().equals(accountNumber))
                    .findFirst()
                    .orElse(null);
        } catch (Exception e) {
            return null;
        }
    }

    private int getUnreadNotificationsCount() {
        List<Notification> notifications = bankingFacade.getCustomerNotifications(currentCustomerId);
        return (int) notifications.stream().filter(notif -> !notif.isRead()).count();
    }

    private int readIntInput() {
        while (true) {
            try {
                return Integer.parseInt(scanner.nextLine().trim());
            } catch (NumberFormatException e) {
                System.out.print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ: ");
            }
        }
    }

    private BigDecimal readBigDecimalInput() {
        while (true) {
            try {
                return new BigDecimal(scanner.nextLine().trim());
            } catch (NumberFormatException e) {
                System.out.print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É: ");
            }
        }
    }

    private void pressAnyKeyToContinue() {
        System.out.print("‚Üµ –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...");
        scanner.nextLine();
    }

    private void showSuccess(String message) {
        System.out.println("‚úÖ " + message);
    }

    private void showError(String message) {
        System.out.println("‚ùå " + message);
    }

    private void showWarning(String message) {
        System.out.println("‚ö†Ô∏è  " + message);
    }

    private void showInfo(String message) {
        System.out.println("‚ÑπÔ∏è  " + message);
    }

    private String padRight(String s, int n) {
        return String.format("%-" + n + "s", s);
    }
}